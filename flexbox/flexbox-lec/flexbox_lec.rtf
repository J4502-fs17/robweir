{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs46 \cf0 start with example 1 \
\
add to flexbox.css this code: \
\
.container \{\
	display: flex; \
\}\
\
this will take the items and display them horizontally. The container they\'92re in is set to have automatic margins on the left and right. You can see that the flex items themselves will show up in the order that they\'92re set in the html, and will only take up the space that\'92s given to them. \
\
Next, \
.container \{\
	flex-direction: row; \
\}\
\
will run LTR. \
\
Other values to show: row-reverse, column, column-reverse \
\
Keep in mind that these rotate the cross-axis along with the main-axis. \
\
CODE EXAMPLE 2 \
\
.container \{\
	display: flex;\
	flex-wrap: nowrap;\
\}\
\
Same as before. \
\
.container \{\
	display: flex;\
	flex-wrap: wrap;\
\}\
\
content wraps \
\
.container \{\
	display: flex;\
	flex-wrap: wrap-reverse;\
\}\
\
content wraps with last item breaking first \
\
CODE EXAMPLE 3\
\
shorthand \
\
CODE EXAMPLE 4, flex-justify \
\
\pard\pardeftab720\ri-1440\sl288\slmult1\partightenfactor0
\cf0 \kerning1\expnd-2\expndtw-6
.container \{\
	justify-content: flex-start;  \
\}\
\
also: | flex-end | center | space-between | space-around  \
\
CODE EXAMPLE 5, flex-align \
\
Mention that I added in some more text for these examples, so we have something to compare it with \
\
Note that the size of the columns is becoming flexible \
\
.container \{\
	height: 500px; \
	align-items: flex-start;  \
\}\
\
This will make the columns align to the start of the cross-axis, which we\'92ve also given an explicit height to. \
\
Demo flex-end, center, stretch, baseline \
\
for baseline, demo first, then mention will need to alter size of one or two text items\
\
.item-1 \{\
	font-size: 1.35em;\
\}\
\
.item-3 \{\
	font-size: 0.8em;\
\}\
\
and that will show the baseline alignment. \
\
CODE EXAMPLE 6, align-content \
\
note that there are more items now, reduce screen size and you see they are flowing onto a second line \
\
.container \{\
	display: flex;\
	height: 300px;\
	flex-wrap: wrap;\
	align-content: flex-start;\
\}\
\
CODE EXAMPLE 7, order \
\
\pard\pardeftab720\partightenfactor0
\cf0 So we\'92re changing this up by applying an order to an item, not the parent container. We can see that each of our items have an ordinal item class applied to them as well as the overall \'93item\'94 class. This allows me to target individual, well, items. \
\
So let\'92s set the order for an item in our code: \
\
.item-2 \{\
	order: -1; \
\}\
\
and we can see it moves to the front of the order. \
\
Let\'92s move a different item to the back of the order: \
\
.item-6 \{\
	order: 1; \
\}\
\
and we can see that it moves to the back of the order. \
\
Let\'92s rearrange the windows a little and see that this still happens even as these containers flex over multiple lines. \
\
We can add more positive and negative numbers to rearrange the order any way we want, keeping in mind that 0 is the default property: \
\
\
.item-8 \{\
	order: 2; \
\}\
\
and so forth. \
\
CODE EXAMPLE 8, flex-grow \
\
First take all items and set flex-grow value to 1: \
\
.item \{\
	flex-grow: 1; \
\}\
\
Because this is proportional, setting all the items to any given value will result in the same output \'97 they will only grow or shrink given the ratio of items to one another. So for example setting flex-grow on all the items to 2, 3, whatever won\'92t change output. \
\
Now if we set a single item to flex-grow 2, we can see it will take up twice as much room as the other items, at least until it gets to a small size: \
\
.item-2 \{\
	flex-grow: 2; \
\}\
\
Because these are all in proportion to one another, you can get pretty granular with the numbers: 5, 10, whatever \
\
CODE EXAMPLE 9, FLEX-SHRINK \
\
So this is rarely used, but it\'92s useful to do from time to time. The first thing we want to do is to set our container not to wrap, otherwise the example doesn\'92t work: \
\
.container \{\
	display: flex;\
	height: 300px;\
	flex-wrap: nowrap;\
\}\
\
Then we\'92ll add in the basis for all our items \'97 flex-basis is the default size of an element before the remaining space is distributed. \
\
.item \{\
	flex-grow: 1;\
    flex-shrink: 1;\
    flex-basis: 500px;\
\}\
\
Then we add a shrink value for item 2: \
\
.item-2 \{\
	flex-shrink: 3;\
\}\
\pard\pardeftab720\ri-1440\sl288\slmult1\partightenfactor0
\cf0 \
\
CODE EXAMPLE 10, flex-basis\
\
We\'92ll try out setting flex-basis to 0 and also auto, to see what happens: (reference our diagram) \
\
item \{\
	flex-basis: 0;\
	flex-grow: 1; \
\}\
\
.item-3 \{\
	flex-grow: 2;\
\}\
\
Difference is fairly subtle. \
\
CODE EXAMPLE 11, flex-shorthand \
\
.item \{\
	flex: 1;\
\}\
\
.item \{\
	flex: 1 200px; \
\}\
\
CODE EXAMPLE 13, centering \
\
.container \{\
	display: flex;\
	height: 300px;\
\}\
\
.item \{\
	margin: auto;\
\}\
\
height: 50vh; \
\
CODE EXAMPLE 14, responsive menu \
\
By default these items are displayed as flex items. \
\
Going to add \
\
	flex-direction: column;\
\
to have them displayed vertically. \
\
On larger screens, we can add in a little media query to make them display more horizontally, and center them \
\
@media (min-width: 599px) \{\
	.container \{\
		flex-direction: row;\
		justify-content: center;\
	\}\
\}\
\
So that moves it from vertical to horizontal when the page gets wide enough, and centers it. \
\
Let\'92s add one more feature to this \'97 let\'92s say we want our main menu on the left, and the rest of the nav on the right of the page. We\'92ll add one more media query to get this to work; \
\
\
\
@media (min-width: 799px) \{\
\
	.item-1 \{\
		margin-right: auto;\
	\}\
\}\
\
}