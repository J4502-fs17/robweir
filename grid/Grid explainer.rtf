{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 CSS grid basics \
\
Look inside first example, you have CSS and index.html, as well as finished styles. \
\

\b 01-Basics\

\b0 \
We\'92re going to open index.html in a browser (use Firefox Developer Edition) and we see that these are just stacked list items. \
\
Look at the index.html and see that these are list items, inside an unordered list tag with a class of \'93cards.\'94 Remember that direct children of a container with the grid property set on it become grid items. \
\
We\'92ll set the grid property on the item that has a class of \'93cards\'94: \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 .cards \{\
    margin: 0 -10px;\
    padding: 0;\
    list-style: none;\

\b     display: grid;\

\b0 \}\
\
Next we need to define our grid columns. We can do this by adding in: \
\
.cards \{\
    margin: 0 -10px;\
    padding: 0;\
    list-style: none;\
    display: grid;\

\b     grid-template-columns: 1fr 1fr 1fr;\

\b0 \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
This will give us three equal columns, each taking up 1 fraction (1fr) of the available space. We can tweak this around for fun: \
\
1fr 2fr 1fr \
\
Or use explicit width values:\
\
200px 2fr 200px \
\
Right now, we have this weird margin and padding command at the top of the page. That\'92s there because these items are actually list items, so we need to tweak them around to get the sizing to work out (show grid example in FF)\
\
There\'92s a different way to set margins inside of the Grid spec, which is called grid-gap: \
\
grid-gap: 20px; \
\
.cards \{\
    list-style: none;\
    display: grid;\
    grid-template-columns: 1fr 1fr 1fr;\

\b     grid-gap: 20px; \

\b0 \}\
\
Grid-gap is shorthand for grid-column-gap and grid-row-gap: \
\
    grid-column-gap: 10px;\
    grid-row-gap: 25px; \
\
So you could also set those individually. \
\
Apparently the name of these properties is changing from grid-gap to just gap, column-gap and row-gap, so you can include both in your stylesheet for extra backup. \
\
.cards \{\
    margin: 0;\
    padding: 0;\
    list-style: none;\
    display: grid;\
    grid-template-columns: 1fr 1fr 1fr;\
  
\b   grid-gap: 20px;\
    gap: 20px; \

\b0     /*grid-column-gap: 10px;\
    grid-row-gap: 25px; */\
\}\
\

\b 02-Positioning\
\

\b0 So here, our index.html has the same layout we saw before. You can see the logic of the grid rows \'97 each is taking up 1fr of the available space, and because we\'92ve indicated 1fr of space three times, we have three columns on the page. \
\
We can also see that we currently have four column lines and three row lines that we can use for alignment. \
\
Let\'92s alter this code a bit to add in the column and row position for individual items. Keep in mind that each card has its own class. \
\
.card1 \{\
  grid-column: 1 / 3;\
  grid-row: 1;\
\}\
\
The command grid-column 1 / 3; has the following logic: \
\
* start the item at grid column 1 \
* end it at grid column 3 \
\
And grid-row: 1; has the following logic: \
\
* start the item at grid-row 1\
\
Carry this on with each of these commands: \
\
.card2 \{\
  grid-column: 3;\
  grid-row: 1;\
\}\
\
.card3 \{\
  grid-column: 1;\
  grid-row: 2 / 4;\
\}\
\
.card4 \{\
  grid-column: 2 / 4;\
  grid-row: 2;\
\}\
\
.card5 \{\
  grid-column: 2 / 4;\
  grid-row: 3;\
\}\
\
We can also use this to add empty space within our layouts: \
\
.card3 \{\
  grid-column: 1;\
  grid-row: 3 / 4;\
\}\
\
Or \
\
.card4 \{\
  grid-column: 3 / 4;\
  grid-row: 2;\
\}\
\
No other content will flow into that area that we\'92ve left vacant. \
\
The second way to do positioning is with the named areas trick, in which we give each card a name within the grid-area property.\
\
.card1 \{ grid-area: a; \}\
.card2 \{ grid-area: b; \}\
.card3 \{ grid-area: c; \}\
.card4 \{ grid-area: d; \}\
.card5 \{ grid-area: e; \}\
\
Then, the grid-template-areas property takes a set of values that physically describe the layout of the cards: \
\
.cards \{\
        margin: 0;\
        padding: 0;\
        list-style: none;\
        display: grid;\
        grid-template-columns: 1fr 1fr 1fr;\
        grid-gap: 20px;\
     
\b    grid-template-areas:\
            "a a b"\
            ". d d"\
            "c e e";\

\b0     \}\
\
Note the syntax: the command starts after a colon, each row is inside a set of quote marks, and there\'92s a semicolon at the very end. A dot means that nothing would be shown in that area. \
\
You can change up the areas as long as they\'92re contiguous either vertically or horizontally (no L-shaped layout). Try out: \
\

\b "a a b"\
\'93d d .\'94\
"c e .\'94
\b0 \
\
or some other combination. \
\
Note that one thing we can do here is to take the content out of the normal document flow, like we did in Flexbox. This is problematic for accessibility, as you may inadvertently take advantage of the spec to change the order of the content and make it appear out of place or nonsensical for people using screen readers. \
\

\b 3 \'97 Aligning Items \
\

\b0 Alignment in Grid layout works similarly as it does in Flexbox. We\'92re starting here with a layout that\'92s similar to what we did just now, where we have named items that are aligned using the grid-template-areas command. \
\
By default, the area that those items occupy is the whole area available to them \'97 put another way, they\'92re going to fill the available space in the grid layout, accounting for the grid-gap area that we\'92ve left for them. \
\
To be technical, they\'92re using the default property for the \'93align-items\'94 command, which is \'93stretch.\'94 So we can use that align-items command to make the background not stretch, but pull back to only cover a portion of the area: \
\
.cards \{\
    margin: 0;\
    padding: 0;\
    list-style: none;\
    display: grid;\
    grid-template-columns: repeat(4, 1fr);\
    grid-template-rows: repeat(3, 100px);\
    grid-template-areas:\
        "a a a b"\
        "a a a b"\
        "c d d d";\
    grid-gap: 20px;\

\b     align-items: start;
\b0 \
\}\
\
Note that this 
\b doesn\'92t alter the grid structure
\b0 , just any background or area you set on it. You don\'92t magically have more space to insert items into. \
\
I can add some more content to item 1 to demonstrate how the background area works (c&p from finished) \
\
You can use the same commands as we use in Flexbox to alter the alignment of the other grid items, too: \
\
.two \{\
    grid-area: b;\

\b     align-self: stretch;\

\b0 \}\
\
.three \{\
    grid-area: c;\

\b     align-self: flex-end;\

\b0 \}\
\
.four \{\
    grid-area: d;\

\b     align-self: center; \

\b0 \}\
\

\b 4 \'97 Justifying Items 
\b0 \
\
So we\'92ll start with the same example as last time, with items put on the grid and the default (stretch) property applied. We can use the justify-items property to justify them to various spots: \
\
.cards \{\
    margin: 0;\
    padding: 0;\
    list-style: none;\
    display: grid;\
    grid-template-columns: repeat(4, 1fr);\
    grid-template-rows: repeat(3, 100px);\
    grid-template-areas:\
        "a a a b"\
        "a a a b"\
        "c d d d";\
    grid-gap: 20px;\

\b     justify-items: end;
\b0 \
\}\
\
You can also try other values for justifying items \'97 start, center, or stretch (which is of course the default). You can also use the justify-self property to apply these to individual items as well: \
\
.four \{\
    grid-area: d;\
    justify-self: center;\
\}\
\
Keep in mind, justify-items is for setting justification properties on multiple items (it would be applied to the parent container), while justify-self is meant for setting properties on individual items. They are both new enough they aren\'92t yet defined inside Atom, so they won\'92t have auto suggestions for values. \
\
(In case you\'92re confused, the justify property is for items aligned along the 
\b main axis
\b0  of the layout \'97 in this case, left to right \'97 and the align properties are for items aligned along the 
\b cross axis
\b0  of the layout \'97 in this case, top to bottom.) \
\

\b 5 - Aligining Grid Tracks \
\

\b0 So in this case, we\'92re going to look at how to align items to grid tracks if they\'92re small enough to do so. \
\
Up until now, we\'92ve mostly been defining our grid items using the \'93fr\'94 command, which will allow them to take up a fraction of a given size. This is useful when we want a design to respond to different sizes, but we also can define rows and columns with a number and a percentage size. Let\'92s start by doing that: \
\
.cards \{\
    margin: 0;\
    padding: 0;\
    list-style: none;\
    display: grid;\
 
\b    grid-template-columns: repeat(4, 15%);\
    grid-template-rows: repeat(3, 100px);\

\b0     grid-template-areas:\
        "a a a b"\
        "a a a b"\
        "c d d d";\
    grid-gap: 20px;\
\}\
\
This will give us 4 columns, 15% of the containing element\'92s width each, and 3 rows at 100 pixels high each. If you look at the grid inspector in Firefox, you can see that those items are being drawn from the top left, and take up less than the available space in the container. \
\
We can also set an explicit height on the container (right now the height is being drawn to fit the grid items/cards inside it): \
\
.cards \{\
    margin: 0;\
    padding: 0;\
    list-style: none;\
    display: grid;\
    grid-template-columns: repeat(4, 15%);\
    grid-template-rows: repeat(3, 100px);\

\b     height: 50vh;\

\b0     grid-template-areas:\
        "a a a b"\
        "a a a b"\
        "c d d d";\
    grid-gap: 20px;\
\}\
\
vh is a super useful property to use when you need a thing to take up a portion of the 
\b v
\b0 iewport 
\b h
\b0 eight. vw does the same thing for viewport width. \
\
Now that that\'92s done, we can look at it in the grid examiner in FF, and see that the grid is at the top left of our defined container. Now we can add some justify-items and align-items properties to it. \
\
.cards \{\
    margin: 0;\
    padding: 0;\
    list-style: none;\
    display: grid;\
    grid-template-columns: repeat(4, 15%);\
    grid-template-rows: repeat(3, 100px);\
    height: 50vh;\
    grid-template-areas:\
        "a a a b"\
        "a a a b"\
        "c d d d";\
    grid-gap: 20px;\

\b     align-content: space-between;
\b0 \
\}\
\
And \
\
.cards \{\
    margin: 0;\
    padding: 0;\
    list-style: none;\
    display: grid;\
    grid-template-columns: repeat(4, 15%);\
    grid-template-rows: repeat(3, 100px);\
    height: 50vh;\
    grid-template-areas:\
        "a a a b"\
        "a a a b"\
        "c d d d";\
    grid-gap: 20px;\
    align-content: space-between;\

\b     justify-content: space-between;
\b0 \
\}\
\
We can also try this out with the other values of the align- and justify-content commands: center, space-around, stretch, flex-start and flex-end. \
\
6 \'97 }